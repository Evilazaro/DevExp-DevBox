# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: 0.2.0
  ########################################
  ### RESOURCES: System Configuration
  ########################################
  resources:
      ########################################################
      ### Updates required before apply configurations
      ########################################################
      ### Enable: PowerShell
      ### Install PSDscResources
      ### Enable: WinGet
      ### Enable: AppInstaller
      ### Enable: AppInstallerFileBuilder
      ### Enable: DevHome
      ### Enable: DevHome Azure Extension
      ### Enable: DevHome GitHub Extension
      ########################################################
      ### -----------------------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Microsoft.PowerShell
      directives:
        description: Install Microsoft.PowerShell
        allowPrerelease: true
        module: Microsoft.WinGet.DSC
      settings:
        id: Microsoft.PowerShell
      ### Install PSDscResources
      ### -------------------------------------
    - resource: PSDscResources/Script
      id: PSDscResources
      directives:
        description: Install PSDscResources
        allowPrerelease: true
        module: PSDscResources
      settings:
        SetScript: |
          Install-Module -Name PSDscResources -Force -AllowClobber
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft.PowerShell
      ### Enable WinGet
      ### -------------------------------------
    - resource: PSDscResources/Script
      id: Microsoft.AppInstaller
      directives:
        description: Install Microsoft.AppInstaller
      settings:
        SetScript: |
          winget install Microsoft.AppInstaller --accept-package-agreements --force
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft.PowerShell
      ### Enable AppInstaller
      ### -------------------------------------
    - resource: PSDscResources/Script
      id: Microsoft.AppInstallerFileBuilder
      directives:
        description: Install Microsoft.AppInstallerFileBuilder
      settings:
        SetScript: |
          winget install Microsoft.AppInstallerFileBuilder --accept-package-agreements --force
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft.AppInstaller
      ### Enable DevHome
      ### -------------------------------------
    - resource: PSDscResources/Script
      id: Microsoft.DevHome
      directives:
        description: Install Microsoft.DevHome
      settings:
        SetScript: |
          winget install Microsoft.DevHome --accept-package-agreements --force
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft.AppInstallerFileBuilder
      ### Enable DevHome Azure Extension
      ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Installing Microsoft.DevHome Azure Extension
        allowPrerelease: true
        securityContext: current
      settings:
        id: "9MV8F79FGXTR"
        source: msstore
      dependsOn:
        - Microsoft.DevHome
      id: 9MV8F79FGXTR
      ### Enable DevHome GitHub Extension
      ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      directives:
        description: Installing Microsoft.DevHome GitHub Extension
        allowPrerelease: true
        securityContext: current
      settings:
        id: "9NZCC27PR6N6"
        source: msstore
      dependsOn:
        - Microsoft.DevHome
      id: 9NZCC27PR6N6
      ########################################################
      ### OS Configurations
      ########################################################
      ### Enable: Developer Mode
      ### Install: VirtualMachinePlatform
      ### Install: WSL and Ubuntu distro
      ### Install: HyperV
      ### Install: HyperV Management Tools
      ########################################################
      ### -----------------------------------------------------
    - resource: Microsoft.Windows.Developer/DeveloperMode
      id: DeveloperMode
      directives:
        description: Enable Developer Mode
        allowPrerelease: true
      settings:
        Ensure: Present
      dependsOn:
        - Microsoft.DevHome
      # Install Windows VirtualMachinePlatform
      # -------------------------------------
    - resource: PSDscResources/WindowsOptionalFeature
      id: VirtualMachinePlatform
      directives:
        description: Install VirtualMachinePlatform
      settings:
        FeatureName: VirtualMachinePlatform
        Ensure: Present
      dependsOn:
        - DeveloperMode
      ### Install WSL and Ubuntu distro
      ### -------------------------------------
    - resource: PSDscResources/Script
      id: VirtualMachinePlatform
      directives:
        description: Install VirtualMachinePlatform
      settings:
        SetScript: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          # Check the current state of the feature
          $feature = Get-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform

          # Run the command only if the feature is not enabled
          if ($feature.State -ne 'Enabled') {
              Write-Host "Feature 'VirtualMachinePlatform' is not enabled. Enabling it now..."
              Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -All -NoRestart
          } else {
              Write-Host "Feature 'VirtualMachinePlatform' is already enabled."
          }

        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft.DevHome
      ### Install WSL and Ubuntu distro
      ### -------------------------------------
    - resource: PSDscResources/Script
      id: ubuntuwsl
      directives:
        description: Install WSL and Ubuntu distro
      settings:
        SetScript: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          wsl --install -d Ubuntu
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - VirtualMachinePlatform
      ### Install HyperV
      ### -------------------------------------
    - resource: PSDscResources/Script
      id: Microsoft-Hyper-V-All
      directives:
        description: Install HyperV
      settings:
        SetScript: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          $feature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All

          # Run the command only if the feature is not enabled
          if ($feature.State -ne 'Enabled') {
              Write-Host "Feature 'Microsoft-Hyper-V-All' is not enabled. Enabling it now..."
              Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-All -All -NoRestart
          } else {
              Write-Host "Feature 'Microsoft-Hyper-V-All' is already enabled."
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft.DevHome
      ### Install HyperV Management Tools
      ### -------------------------------------
    - resource: PSDscResources/Script
      id: Microsoft-Hyper-V-Tools-All
      directives:
        description: Install HyperV Management Tools
      settings:
        SetScript: |
          $feature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Tools-All

          # Run the command only if the feature is not enabled
          if ($feature.State -ne 'Enabled') {
              Write-Host "Feature 'Microsoft-Hyper-V-Tools-All' is not enabled. Enabling it now..."
              Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V-Tools-All -NoRestart
          } else {
              Write-Host "Feature 'Microsoft-Hyper-V-Tools-All' is already enabled."
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft.DevHome
      ########################################################
      ### Install SDks, CLIs, and Tools
      ########################################################
      ### Install: DotNET SDK 9.0
      ### Install: DotNET Runtime 9.0
      ### Install: Git
      ### Install: GitHub CLI
      ### Install: GitHub Desktop
      ### Install: Azure CLI
      ### Install: Azure Developer CLI
      ### Install: Postman
      ########################################################
      ### -----------------------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Microsoft.DotNet.SDK.9
      directives:
        description: Install DotNET SDK 9.0
        allowPrerelease: true
      settings:
        id: Microsoft.DotNet.SDK.9
      dependsOn:
        - Microsoft.DevHome
      ### Install DotNET Runtime 9.0
      ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Microsoft.DotNet.Runtime.9
      directives:
        description: Install DotNET Runtime 9.0
        allowPrerelease: true
      settings:
        id: Microsoft.DotNet.Runtime.9
      dependsOn:
        - Microsoft.DotNet.SDK.9
      ### Install Git
      ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Git.Git
      directives:
        description: Install Git
        allowPrerelease: true
      settings:
        id: Git.Git
      dependsOn:
        - Microsoft.DevHome
      ### Install GitHub CLI
      ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: GitHub.cli
      directives:
        description: Install GitHub.cli
        allowPrerelease: true
      settings:
        id: GitHub.cli
      dependsOn:
        - Git.Git
      ### Install GitHub Desktop
      ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: GitHub.GitHubDesktop
      directives:
        description: Install GitHub.GitHubDesktop
        allowPrerelease: true
      settings:
        id: GitHub.GitHubDesktop
      dependsOn:
        - Git.Git
        - GitHub.cli  
      ### Install Azure CLI
      ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Microsoft.AzureCLI
      directives:
        description: Install Azure CLI
        allowPrerelease: true
      settings:
        id: Microsoft.AzureCLI
      dependsOn:
        - Microsoft.DotNet.SDK.9
      ### Install Azure Developer CLI
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Microsoft.Azd
      directives:
        description: Install Azure Developer CLI
        allowPrerelease: true
      settings:
        id: Microsoft.Azd
      dependsOn:
        - Microsoft.AzureCLI
      ### Install Postman
      ### -------------------------------------
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Postman.Postman
      directives:
        description: Install Postman.Postman
        allowPrerelease: true
      settings:
        id: Postman.Postman
      dependsOn:
        - Microsoft.DevHome