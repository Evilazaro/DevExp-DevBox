# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
#
# Azure DevBox Backend Development Configuration
# =============================================
#
# Purpose:
#   This DSC configuration creates a complete Azure backend development environment with:
#   - WSL2 with Ubuntu for Linux-based development
#   - Azure CLI tools in both Windows and Ubuntu environments
#   - .NET development tools in both environments
#   - Container tools (Docker Desktop, Helm) for microservice development
#   - API testing tools (Postman)
#
# Best Practices:
#   - Uses Windows and WSL2 for a complete cross-platform experience
#   - Applies principle of least privilege where possible
#   - Maintains consistent environment between Windows and Linux
#   - Uses official Microsoft installation methods for all tools
#
properties:
  configurationVersion: 0.2.0

  resources:
    #----------------------------------------------
    # WSL2 Installation and Configuration
    #----------------------------------------------
    # Windows Subsystem for Linux is the foundation for cross-platform development
    # enabling Linux-based Azure services testing in a local environment
    - resource: PSDscResources/Script
      id: Microsoft-Windows-Subsystem-Linux
      directives:
        description: Enable Windows Features and Install Ubuntu for WSL
        securityContext: elevated # Requires admin rights to enable Windows features
      settings:
        SetScript: |
          try {
              # Set execution policy for current process
              Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue            
              # Ensure path is properly set
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              Write-Verbose "Installing Windows Subsystem for Linux (WSL)" -Verbose
              wsl --install --no-launch 2>$null
          } catch {
              Write-Error "Failed to install WSL: $_"
          }
        GetScript: return $false
        TestScript: return $false

    # Install Ubuntu distribution which provides a comprehensive Linux environment
    # with broad Azure service compatibility and tool support
    - resource: PSDscResources/Script
      id: Ubuntu
      directives:
        description: Install Ubuntu for WSL
        securityContext: elevated # Requires admin rights to install WSL distribution
      settings:
        SetScript: |
          try {
              # Set execution policy for current process
              Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue            
              # Ensure path is properly set
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              Write-Verbose "Installing Ubuntu for WSL" -Verbose
              wsl --install -d Ubuntu --no-launch 2>$null
          } catch {
              Write-Error "Failed to install Ubuntu: $_"
          }
        GetScript: return $false
        TestScript: return $false

    # Configure user access to simplify development and avoid credential prompts
    # while maintaining security through Windows authentication
    - resource: PSDscResources/Script
      id: Ubuntu.User
      directives:
        description: Add the current user as an administrator to Ubuntu
        securityContext: elevated # Requires admin rights to configure WSL distribution
      settings:
        SetScript: |
          try {
              # Set execution policy for current process
              Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue            
              # Ensure path is properly set
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              $newUser = $env:USERNAME.ToLower()
              $password = "SecureP@ssw0rd" # Consider using a more secure password generation method
              $escapedPassword = $password -replace '(["\\$`])', '\\$1'
              # Create user account
              wsl.exe -d Ubuntu -u root -- bash -c "sudo adduser --quiet --disabled-password --gecos '' $newUser"
              # Set password
              wsl.exe -d Ubuntu -u root -- bash -c "echo '${newUser}:${escapedPassword}' | sudo chpasswd"
              # Add to sudo group
              wsl.exe -d Ubuntu -u root -- bash -c "sudo usermod -aG sudo $newUser"
              # Enable passwordless sudo for DevBox convenience
              wsl.exe -d Ubuntu -u root -- bash -c "echo '$newUser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/$newUser"
          } catch {
              Write-Error "Failed to add user as administrator: $_"
          }
        GetScript: return $false
        TestScript: return $false

    # Update Ubuntu packages to ensure security patches and latest tool compatibility
    # following Azure best practices for keeping development environments current
    - resource: PSDscResources/Script
      id: Ubuntu.Update
      directives:
        description: Update Ubuntu package repositories and install updates
        securityContext: elevated # Requires admin rights to run WSL commands
      settings:
        SetScript: |
          try {
              # Set execution policy for current process
              Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue            
              # Ensure path is properly set
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              $updateCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; apt-get update && apt-get upgrade -y --quiet'"
              wsl.exe -d Ubuntu -u root -- bash -c "$updateCommand"
          } catch {
              Write-Error "Failed to update Ubuntu packages: $_"
          }
        GetScript: return $false
        TestScript: return $false

    #----------------------------------------------
    # Azure Development Tools for Ubuntu
    #----------------------------------------------
    # Install Azure CLI tools in Ubuntu to provide cross-platform development capability
    # and ensure consistent deployment behavior between local and cloud environments
    - resource: PSDscResources/Script
      id: Ubuntu.AzureCli
      directives:
        description: Install Azure CLI, Developer CLI and Bicep on Ubuntu
        securityContext: elevated # Requires admin rights to run WSL commands
      settings:
        SetScript: |
          try {
              # Set execution policy for current process
              Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue            
              # Ensure path is properly set
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              # Install curl as prerequisite
              $updateCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; apt-get install curl --quiet -y'"
              wsl.exe -d Ubuntu -u root -- bash -c "$updateCommand"
              # Install Azure CLI using official Microsoft script
              $updateCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; curl -fsSL https://aka.ms/InstallAzureCLIDeb | sudo bash'"
              wsl.exe -d Ubuntu -u root -- bash -c "$updateCommand"
              # Install Azure Developer CLI using official Microsoft script
              $updateCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; curl -fsSL https://aka.ms/install-azd.sh | sudo bash'"
              wsl.exe -d Ubuntu -u root -- bash -c "$updateCommand"
          } catch {
              Write-Error "Failed to install Azure CLI: $_"
          }
        GetScript: return $false
        TestScript: return $false

    # Install .NET SDK and Runtime for cross-platform .NET development
    # enabling development of Azure Functions, Web Apps, and microservices
    - resource: PSDscResources/Script
      id: Ubuntu.DotNetSDK
      directives:
        description: Install .NET 9 SDK and Runtime on Ubuntu
        securityContext: elevated # Requires admin rights to run WSL commands
      settings:
        SetScript: |
          try {
              # Set execution policy for current process
              Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue            
              # Ensure path is properly set
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              # Add Microsoft's PPA for .NET
              $installDotnetCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; sudo add-apt-repository ppa:dotnet/backports -y'"
              wsl.exe -d Ubuntu -u root -- bash -c "$installDotnetCommand"
              # Install .NET SDK for development
              $installDotnetCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; apt-get update --quiet && apt-get install --quiet -y dotnet-sdk-9.0'"
              wsl.exe -d Ubuntu -u root -- bash -c "$installDotnetCommand"
              # Install ASP.NET Core Runtime for web applications
              $installDotnetCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; apt-get install --quiet -y aspnetcore-runtime-9.0'"
              wsl.exe -d Ubuntu -u root -- bash -c "$installDotnetCommand"
          } catch {
              Write-Error "Failed to install .NET SDK and Runtime: $_"
          }
        GetScript: return $false
        TestScript: return $false

    #----------------------------------------------
    # Container and API Development Tools
    #----------------------------------------------
    # Docker Desktop provides container management with Kubernetes integration
    # essential for microservices development and container-based Azure services
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Docker.DockerDesktop
      directives:
        description: Install Docker Desktop for container development and testing
        allowPrerelease: true
        securityContext: elevated # Requires admin rights to install system services
      settings:
        id: Docker.DockerDesktop

    # Helm simplifies Kubernetes application management with package-based deployments
    # commonly used with Azure Kubernetes Service (AKS)
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Helm.Helm
      directives:
        description: Install Helm for Kubernetes application deployment management
        allowPrerelease: true
      settings:
        id: Helm.Helm

    # Postman enables API testing and documentation, ensuring reliable integrations
    # between backend services and Azure APIs
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Postman.Postman
      directives:
        description: Install Postman API platform for designing, testing and documenting APIs
        allowPrerelease: true
      settings:
        id: Postman.Postman

    # Resource: .NET Workload Update
    # This resource ensures all installed .NET workloads are up to date, which is
    # important for maintaining compatibility with Azure services and security updates.
    # Following Microsoft's recommendation to regularly update workloads for optimal tooling.
    - resource: PSDscResources/Script
      id: Dotnet.WorkloadUpdate
      directives:
        description: Update all installed .NET workloads
        securityContext: elevated # Requires admin rights to update system packages
      settings:
        SetScript: |
          try {
              # Set execution policy for current process
              Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue            
              # Ensure path is properly set
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              # Update all workloads and ignore failures from sources that might be temporarily unavailable
              # This ensures the update continues even if one workload source is unreachable
              dotnet workload update --ignore-failed-sources
          } catch {
              Write-Error "Failed to update WinGet packages: $_"
          }
        GetScript: return $false
        TestScript: return $false

    - resource: PSDscResources/Script
      id: Microsoft.VisualStudioCode.Extensions
      directives:
        description: Install VS Code Extensions
        securityContext: elevated
        allowPrerelease: true
      settings:
        SetScript: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          code --install-extension ms-vscode.powershell
          code --install-extension ms-vscode-remote.remote-wsl
          code --install-extension ms-dotnettools.csdevkit	
          code --install-extension ms-vscode.vscode-typescript-next
          code --install-extension redhat.vscode-yaml
          code --install-extension ms-azuretools.vscode-bicep
          code --install-extension ms-vscode.vscode-node-azure-pack
          code --install-extension ms-vscode.azurecli
          code --install-extension GitHub.remotehub
          code --install-extension GitHub.vscode-pull-request-github
        GetScript: return $false
        TestScript: return $false
