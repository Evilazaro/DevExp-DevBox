# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
#
# Azure DevBox Backend Development Configuration
# =============================================
#
# Purpose:
#   This DSC configuration creates a complete Azure backend development environment with:
#   - WSL2 with Ubuntu for Linux-based development
#   - Azure CLI tools in both Windows and Ubuntu environments
#   - .NET development tools in both environments
#   - Container tools (Docker Desktop, Helm) for microservice development
#   - API testing tools (Postman)
#
# Requirements:
#   - Azure DevBox with Windows 11
#   - Administrator access for tool installation
#   - Internet connectivity for package downloads
#
# Security Considerations:
#   - Uses secure communication channels for downloads
#   - Applies principle of least privilege where possible
#   - Uses official Microsoft installation methods
#
# Best Practices:
#   - Uses Windows and WSL2 for a complete cross-platform experience
#   - Applies principle of least privilege where possible
#   - Maintains consistent environment between Windows and Linux
#   - Uses official Microsoft installation methods for all tools
#
# Maintainer: DevExp Team
#
properties:
  configurationVersion: 0.2.0

  resources:
    #----------------------------------------------
    # Container and API Development Tools
    #----------------------------------------------

    # Resource: Docker Desktop
    # Docker Desktop provides container management with Kubernetes integration
    # essential for microservices development and container-based Azure services.
    #
    # This tool enables:
    # - Local testing of containerized applications before Azure deployment
    # - Integration with Azure Container Registry for image management
    # - Local Kubernetes testing before AKS deployment
    # - Development of container-based solutions for Azure App Service, ACI, and AKS
    #
    # Following Azure best practices by using the official package through WinGet.
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Docker.DockerDesktop
      directives:
        description: Install Docker Desktop for container development and testing
        allowPrerelease: true
        securityContext: elevated # Requires admin rights to install system services
      settings:
        id: Docker.DockerDesktop

    # Resource: Helm Package Manager
    # Helm simplifies Kubernetes application management with package-based deployments
    # commonly used with Azure Kubernetes Service (AKS).
    #
    # This tool enables:
    # - Consistent deployment of applications to AKS
    # - Management of application release cycles
    # - Simplified configuration of complex Kubernetes applications
    # - Integration with Azure DevOps pipelines for CI/CD
    #
    # WinGet installation ensures the official package is used.
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Helm.Helm
      directives:
        description: Install Helm for Kubernetes application deployment management
        allowPrerelease: true
      settings:
        id: Helm.Helm

    # Resource: Postman API Testing Platform
    # Postman enables API testing and documentation, ensuring reliable integrations
    # between backend services and Azure APIs.
    #
    # This tool enables:
    # - Testing of Azure Functions, Logic Apps, and API Management endpoints
    # - Creation of comprehensive API test suites
    # - Documentation of APIs for development teams
    # - Automation of API testing for Azure integration scenarios
    #
    # WinGet installation follows Azure security best practices.
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Postman.Postman
      directives:
        description: Install Postman API platform for designing, testing and documenting APIs
        allowPrerelease: true
      settings:
        id: Postman.Postman

    # Resource: .NET Workload Update
    # This resource ensures all installed .NET workloads are up to date, which is
    # important for maintaining compatibility with Azure services and security updates.
    # Following Microsoft's recommendation to regularly update workloads for optimal tooling.
    #
    # .NET workloads include specialized tooling for:
    # - Azure Functions development
    # - ASP.NET Core web applications and APIs
    # - Azure Aspire cloud-native applications
    # - Azure App Service deployment capabilities
    # - Entity Framework Core for Azure SQL and Cosmos DB integration
    - resource: PSDscResources/Script
      id: Dotnet.WorkloadUpdate
      directives:
        description: Update all installed .NET workloads
        securityContext: elevated # Requires admin rights to update .NET workloads
      settings:
        SetScript: |
          try {
              # Set execution policy for current process
              # This ensures scripts can run without manual confirmation prompts
              # Following Azure automation best practices for non-interactive execution
              Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue            
              
              # Ensure path is properly set
              # This combines both machine and user paths to ensure we can find the dotnet command
              # Following Azure DevBox best practice for PATH environment management
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              
              # Check if dotnet command exists before attempting updates
              if (Get-Command dotnet -ErrorAction SilentlyContinue) {
                  Write-Verbose "Updating .NET workloads - this may take several minutes..." -Verbose
                  
                  # Update all workloads and ignore failures from sources that might be temporarily unavailable
                  # This ensures the update continues even if one workload source is unreachable
                  # Following Microsoft best practice for .NET SDK maintenance
                  dotnet workload update --ignore-failed-sources
                  
                  Write-Verbose ".NET workloads updated successfully" -Verbose
              } else {
                  Write-Warning "dotnet command not found. .NET SDK may not be installed."
              }
          } catch {
              # Fixed error message to correctly reference .NET workloads instead of WinGet packages
              Write-Error "Failed to update .NET workloads: $_"
          }
        GetScript: return $false
        # In production environments, TestScript would check if specific
        # extensions are already installed to avoid unnecessary reinstallation
        TestScript: return $false

    # Resource: Visual Studio Code Extensions
    # This resource installs essential VS Code extensions for Azure backend development.
    # The extensions provide IntelliSense, debugging, and other features specific to
    # Azure development workflows, ensuring a complete development environment.
    #
    # These extensions follow the Microsoft-recommended developer tooling for
    # Azure cloud-native application development and DevOps practices.
    - resource: PSDscResources/Script
      id: Microsoft.VisualStudioCode.Extensions
      directives:
        description: Install VS Code Extensions for Azure backend development
        securityContext: elevated # Required for system-wide extension installation
        allowPrerelease: true # Allows latest preview features
      settings:
        SetScript: |
          try {
              # Set execution policy to bypass for automation purposes
              # This is required for PowerShell script execution in restricted environments
              Set-ExecutionPolicy Bypass -Scope Process -Force
              
              # Ensure VS Code is in the PATH for the code command
              # Combines machine and user paths to ensure the command is found
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              
              Write-Verbose "Installing VS Code extensions for Azure backend development..." -Verbose
              
              # PowerShell extension for scripting and Azure automation tasks
              code --install-extension ms-vscode.powershell
              
              # WSL integration for cross-platform development between Windows/Linux
              code --install-extension ms-vscode-remote.remote-wsl
              
              # C# development kit for .NET applications and Azure Functions
              code --install-extension ms-dotnettools.csdevkit
              
              # TypeScript with latest features for modern API development
              code --install-extension ms-vscode.vscode-typescript-next
              
              # YAML support for Kubernetes, ARM templates, and pipelines
              code --install-extension redhat.vscode-yaml
              
              # Bicep for Azure infrastructure as code (recommended over ARM templates)
              code --install-extension ms-azuretools.vscode-bicep
              
              # Azure Tools extension pack for comprehensive Azure development
              code --install-extension ms-vscode.vscode-node-azure-pack
              
              # Azure CLI tools for command-line management of Azure resources
              code --install-extension ms-vscode.azurecli
              
              # GitHub remote repositories for cloud-based development
              code --install-extension GitHub.remotehub
              
              # GitHub Pull Requests for collaborative development
              code --install-extension GitHub.vscode-pull-request-github

              # Docker extension for container management and development
              code --install-extension ms-azuretools.vscode-docker

              # Kubernetes extension for managing Kubernetes clusters and resources
              code --install-extension ms-kubernetes-tools.vscode-kubernetes-tools

              # Postman extension for API testing and documentation
              code --install-extension Postman.postman-for-vscode
              
              Write-Verbose "VS Code extensions installed successfully" -Verbose
          } catch {
              Write-Error "Failed to install VS Code extensions: $_"
          }
        # In a fully idempotent implementation, this would return the current state
        # of installed extensions for reporting and validation
        GetScript: return $false
        # In production environments, TestScript would check if specific
        # extensions are already installed to avoid unnecessary reinstallation
        TestScript: return $false
