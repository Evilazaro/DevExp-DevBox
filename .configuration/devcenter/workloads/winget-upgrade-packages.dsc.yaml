# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
#
# Common Configuration Sample for .NET Engineers
# =================================
#
# Purpose:
#   This DSC configuration sets up a standard development environment with:
#   - Development storage using Dev Drive
#   - Source control tools (Git, GitHub CLI)
#   - Development runtimes (.NET 9 SDK and Runtime)
#   - Development tools (VS Code, Node.js)
#
# Prerequisites:
#   - Windows 10/11 with admin privileges
#   - Internet connectivity for package downloads
#
# Maintainers: DevExp Team

properties:
  configurationVersion: "0.2.0"
  resources:
    - resource: PSDscResources/Script
      id: Winget-Upgrade-Packages
      directives:
        description: Upgrade all Microsoft Store apps using winget
        securityContext: elevated # Requires admin rights to install apps
      settings:
        SetScript: |
          $ErrorActionPreference = 'Stop'
          $ProgressPreference    = 'SilentlyContinue'
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force | Out-Null

          $scriptUrl    = 'https://raw.githubusercontent.com/Evilazaro/DevExp-DevBox/main/.configuration/devcenter/workloads/winget-update.ps1'
          $downloadDir  = Join-Path $env:TEMP 'DevExp-DevBox-Setup'
          $localScript  = Join-Path $downloadDir 'winget-update.ps1'

          # Ensure TLS 1.2 for older hosts
          try {
              [System.Net.ServicePointManager]::SecurityProtocol = `
                  [System.Net.ServicePointManager]::SecurityProtocol -bor [System.Net.SecurityProtocolType]::Tls12
          } catch { }

          # Create temp folder if needed
          if (-not (Test-Path -LiteralPath $downloadDir)) {
              New-Item -ItemType Directory -Path $downloadDir -Force | Out-Null
          }

          # Download script quietly (retry up to 3 times)
          $maxAttempts = 3
          for ($attempt = 1; $attempt -le $maxAttempts; $attempt++) {
              try {
                  Invoke-WebRequest -Uri $scriptUrl -OutFile $localScript -UseBasicParsing -TimeoutSec 60 -ErrorAction Stop
                  break
              } catch {
                  if ($attempt -eq $maxAttempts) {
                      Write-Error "Failed to download script after $maxAttempts attempts. $_"
                      exit 1
                  }
                  Start-Sleep -Seconds ([int][Math]::Pow(2, $attempt))
              }
          }

          # Validate and unblock
          if (-not (Test-Path -LiteralPath $localScript) -or (Get-Item -LiteralPath $localScript).Length -le 0) {
              Write-Error "Downloaded script is missing or empty: $localScript"
              exit 1
          }
          try { Unblock-File -LiteralPath $localScript } catch { }

          # Run the script in a separate quiet PowerShell process
          Start-Process powershell.exe -ArgumentList @(
              '-NoProfile', '-ExecutionPolicy', 'Bypass', '-File', $localScript
          ) -WindowStyle Hidden -Wait

        GetScript: return $false
        TestScript: return $false