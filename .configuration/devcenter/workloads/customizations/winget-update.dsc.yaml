# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
#
# Purpose: This configuration automatically updates all installed packages using Windows Package Manager (winget)
# It implements idempotence by checking if updates are available before running the update command
#
properties:
  configurationVersion: "0.2.0"
  resources:
    - resource: PSDscResources/Script
      id: WingetPackageUpdates
      directives:
        description: Update all installed packages using Windows Package Manager (winget)
        module: PSDscResources
      settings:
        GetScript: |
          # Set execution policy for current process
          Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction SilentlyContinue
            
          # Ensure path is properly set
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

          # This returns the current state (whether updates are available)
          $scriptBlock = {
            try {
              # Check if winget is available in PATH
              if (-not (Get-Command 'winget' -ErrorAction SilentlyContinue)) {
                Write-Warning "Windows Package Manager (winget) is not available"
                return @{ WingetAvailable = $false; UpdatesAvailable = $false }
              }
              
              # Check for available updates
              $updateCheck = winget upgrade --accept-source-agreements | Select-String -Pattern '\d+ upgrades available\.'
              if ($updateCheck) {
                $count = [regex]::Match($updateCheck, '(\d+) upgrades available').Groups[1].Value
                return @{ WingetAvailable = $true; UpdatesAvailable = $true; UpdateCount = $count }
              }
              return @{ WingetAvailable = $true; UpdatesAvailable = $false; UpdateCount = 0 }
            }
            catch {
              Write-Warning "Error checking for updates: $_"
              return @{ WingetAvailable = $false; UpdatesAvailable = $false; Error = $_.Exception.Message }
            }
          }

          # Execute in a fresh PowerShell process to ensure correct PATH
          $result = & powershell -Command $scriptBlock
          return $result
        TestScript: return $false
        SetScript: return $false
