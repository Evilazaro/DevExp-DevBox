# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2

# This DSC configuration installs and configures the following:
# - Installs Node.js using WinGet.
# - Installs Visual Studio Code using WinGet.
# - Installs Visual Studio Code CLI using WinGet.
# - Installs a list of essential VS Code extensions.

properties:
  configurationVersion: "0.2.0"
  resources:
    # Install Node.js using WinGet
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: OpenJS.NodeJS
      directives:
        description: Install Node.js
        securityContext: elevated
        allowPrerelease: true
      settings:
        id: OpenJS.NodeJS

    # Install Visual Studio Code using WinGet
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Microsoft.VisualStudioCode
      directives:
        description: Install Visual Studio Code
        securityContext: elevated
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudioCode
      dependsOn:
        - OpenJS.NodeJS

    # Install Visual Studio Code CLI
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: Microsoft.VisualStudioCode.CLI
      directives:
        description: Install Visual Studio Code CLI
        securityContext: elevated
        allowPrerelease: true
      settings:
        id: Microsoft.VisualStudioCode.CLI
      dependsOn:
        - Microsoft.VisualStudioCode

    # Install a list of VS Code extensions
    - resource: PSDscResources/Script
      id: Microsoft.VisualStudioCode.Extensions
      directives:
        description: Install VS Code Extensions
        securityContext: elevated
        allowPrerelease: true
      settings:
        SetScript: |
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User") 
          $extensions = @(
              "ms-vscode.powershell",
              "ms-vscode-remote.remote-wsl",
              "ms-dotnettools.csharp",
              "ms-dotnettools.csdevkit",
              "ms-dotnettools.vscodeintellicode-csharp"
          )
          foreach ($extension in $extensions) {
              try {
                  code --install-extension $extension --force
                  Write-Host "Installed: $extension"
              } catch {
                  Write-Host "Failed to install: $extension"
              }
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft.VisualStudioCode