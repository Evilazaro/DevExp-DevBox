# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  configurationVersion: "0.2.0"
  # This DSC configuration enables Windows virtualization features.
  #
  # Purpose:
  # Sets up Windows Subsystem for Linux (WSL) to support Linux workloads
  # on Windows development environments.
  #
  # Components:
  # - WSL: Windows Subsystem for Linux with Ubuntu distribution
  resources:
    # Install Windows Subsystem for Linux (WSL)
    # Enables the WSL feature and installs Ubuntu distribution for Linux development
    - resource: PSDscResources/Script
      id: WSL
      directives:
        description: Enable Windows Features and Install Ubuntu for WSL
        securityContext: elevated
      settings:
        SetScript: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          # Install WSL with Ubuntu distribution
          Write-Verbose "Installing Windows Subsystem for Linux (WSL)" -Verbose                     
          Write-Verbose "Installing WSL feature" -Verbose
          wsl --install -d Ubuntu --no-launch
        # Always returns false to simplify DSC state detection
        GetScript: return $false
        # Always executes SetScript to ensure installation is attempted
        TestScript: return $false

    # Configure Ubuntu user
    # Creates and configures a matching user account in Ubuntu with sudo privileges
    - resource: PSDscResources/Script
      id: Ubuntu.User
      directives:
        description: Add the current user as an administrator to Ubuntu
        securityContext: elevated
      settings:
        SetScript: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          $newUser = $env:USERNAME.ToLower()
          # Generate a random secure password instead of hardcoding
          Add-Type -AssemblyName System.Web
          $securePassword = [System.Web.Security.Membership]::GeneratePassword(16, 4)
          $escapedPassword = $securePassword -replace '(["\\$`])', '\\$1'  # Escape for bash

          # Create new user account that matches Windows username
          wsl.exe -d Ubuntu -u root -- bash -c "sudo adduser --quiet --disabled-password --gecos '' $newUser"
          # Set the generated password for the user
          wsl.exe -d Ubuntu -u root -- bash -c "echo '${newUser}:${escapedPassword}' | sudo chpasswd"
          # Add user to sudo group for administrative privileges
          wsl.exe -d Ubuntu -u root -- bash -c "sudo usermod -aG sudo $newUser"
          # Configure passwordless sudo for development convenience
          wsl.exe -d Ubuntu -u root -- bash -c "echo '$newUser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/$newUser"
        # Always returns false to simplify DSC state detection
        GetScript: return $false
        # Always executes SetScript to ensure user configuration is applied
        TestScript: return $false

    # Update Ubuntu packages
    # Ensures the Ubuntu distribution has the latest updates installed
    - resource: PSDscResources/Script
      id: Ubuntu.Update
      directives:
        description: Update and upgrade Ubuntu packages
        securityContext: elevated
      settings:
        SetScript: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
          # Update package lists from repositories
          wsl.exe -d Ubuntu -u root -- bash -c "sudo apt-get update"
          # Upgrade installed packages to latest versions
          wsl.exe -d Ubuntu -u root -- bash -c "sudo apt-get upgrade -y"
        # Always returns false to simplify DSC state detection
        GetScript: return $false
        # Always executes SetScript to ensure updates are applied
        TestScript: return $false