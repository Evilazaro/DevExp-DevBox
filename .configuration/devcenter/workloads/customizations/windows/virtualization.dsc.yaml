# yaml-language-server: $schema=https://raw.githubusercontent.com/microsoft/winget-cli/refs/heads/master/schemas/JSON/configuration/configuration.schema.0.2.json

properties:
  configurationVersion: 0.2.0

  ########################################
  ### RESOURCES: System Configuration
  ### Install: WSL and Ubuntu
  ########################################
  resources:
    ### Install Windows Subsystem for Linux (WSL)
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: Microsoft-Windows-Subsystem-Linux
      directives:
        description: Enable Windows Features and Install Ubuntu for WSL
      settings:
        SetScript: |
          try {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              Write-Verbose "Setting environment path"
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              Write-Verbose "Installing Windows Subsystem for Linux (WSL)"
              wsl --install --no-launch
              Write-Host "WSL installed successfully."
          } catch {
              Write-Error "Failed to install WSL: $_"
          }
        GetScript: return $false
        TestScript: return $false

    ### Install Ubuntu for WSL
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: Ubuntu
      directives:
        description: Install Ubuntu for WSL
      settings:
        SetScript: |
          try {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              Write-Verbose "Setting environment path"
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              Write-Verbose "Installing Ubuntu for WSL"
              wsl --install -d Ubuntu --no-launch
              Write-Host "Ubuntu installed successfully."
          } catch {
              Write-Error "Failed to install Ubuntu: $_"
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft-Windows-Subsystem-Linux

    ### Add Current User as Administrator
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: Ubuntu.User
      directives:
        description: Add the current user as an administrator to Ubuntu
      settings:
        SetScript: |
          try {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              Write-Verbose "Setting environment path"
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")
              # Get the current Windows username (converted to lowercase for Linux)
              $newUser = $env:USERNAME.ToLower()

              # Define a fixed password for the new WSL user
              $password = "SecureP@ssw0rd"

              # Escape special characters in the password for Bash
              $passwordBash = $password -replace '(["\$`])', '\\$1'

              # Construct the WSL command as a single-line string
              $wslCommand = @(
                  "sudo adduser --quiet --disabled-password --gecos '' $newUser",  # Fixed escaping issue
                  "echo '$newUser:$passwordBash' | sudo chpasswd",
                  "sudo usermod -aG sudo $newUser",
                  "echo '$newUser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/$newUser",
                  "sudo apt-get update",
                  "sudo apt-get upgrade -y"
              ) -join "; "

              # Run the command in WSL and ensure it runs silently
              wsl.exe -d Ubuntu -u root -- bash -c "$wslCommand" 2>$null
          } catch {
              Write-Error "Failed to add user as administrator: $_"
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Ubuntu

    ### Install Azure CLI
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: Ubuntu.AzureCli
      directives:
        description: Install Azure CLI on Ubuntu
      settings:
        SetScript: |
          try {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              Write-Verbose "Setting environment path"
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

              # Construct the WSL command as a single-line string
              $wslCommand = @(
                  "sudo apt-get install -y curl",
                  "curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash",
                  "curl -fsSL https://aka.ms/install-azd.sh | sudo bash"
              ) -join "; "

              # Run the command in WSL and ensure it runs silently
              wsl.exe -d Ubuntu -u root -- bash -c "$wslCommand" 2>$null
          } catch {
              Write-Error "Failed to install Azure CLI: $_"
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Ubuntu.User

    ### Install .NET SDK and Runtime
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: Ubuntu.NET
      directives:
        description: Install .NET SDK and Runtime
      settings:
        SetScript: |
          try {
              Set-ExecutionPolicy Bypass -Scope Process -Force
              Write-Verbose "Setting environment path"
              $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

              # Construct the WSL command as a single-line string
              $wslCommand = @(
                  "sudo apt-get update",
                  "sudo apt-get install -y dotnet-sdk-9.0",
                  "sudo apt-get install -y aspnetcore-runtime-9.0"
              ) -join "; "

              # Run the command in WSL and ensure it runs silently
              wsl.exe -d Ubuntu -u root -- bash -c "$wslCommand" 2>$null
          } catch {
              Write-Error "Failed to install .NET SDK and Runtime: $_"
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Ubuntu.User