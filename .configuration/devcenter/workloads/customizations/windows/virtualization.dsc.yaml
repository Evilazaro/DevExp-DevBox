# yaml-language-server: $schema=https://raw.githubusercontent.com/microsoft/winget-cli/refs/heads/master/schemas/JSON/configuration/configuration.schema.0.2.json

# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
#
# Purpose: This configuration installs and configures Windows Subsystem for Linux (WSL) 
# with Ubuntu distribution and essential developer tools including Azure CLI and .NET SDK.
#
# Requirements:
#   - Windows 10/11 with admin privileges
#   - Internet connectivity for package downloads
#   - Runs on Azure DevBox or compatible Windows systems
#
# Maintainer: DevExp Team

properties:
  configurationVersion: 0.2.0

  resources:
    # Resource 1: Install Windows Subsystem for Linux feature
    - resource: PSDscResources/Script
      id: Microsoft-Windows-Subsystem-Linux
      directives:
        description: Enable Windows Features and Install Ubuntu for WSL
        securityContext: elevated
      settings:
        SetScript: |
          try {
              Write-Verbose "Installing Windows Subsystem for Linux (WSL)" -Verbose
              wsl --install --no-launch 2>$null
          } catch {
              Write-Error "Failed to install WSL: $_"
          }
        GetScript: return $false
        TestScript: return $false

    # Resource 2: Install Ubuntu distribution for WSL
    - resource: PSDscResources/Script
      id: Ubuntu
      directives:
        description: Install Ubuntu for WSL
        securityContext: elevated
      settings:
        SetScript: |
          try {
              Write-Verbose "Installing Ubuntu for WSL" -Verbose
              wsl --install -d Ubuntu --no-launch 2>$null
          } catch {
              Write-Error "Failed to install Ubuntu: $_"
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft-Windows-Subsystem-Linux

    # Resource 3: Configure Ubuntu user account
    - resource: PSDscResources/Script
      id: Ubuntu.User
      directives:
        description: Add the current user as an administrator to Ubuntu
        securityContext: elevated
      settings:
        SetScript: |
          try {
              $newUser = $env:USERNAME.ToLower()
              $password = "SecureP@ssw0rd"
              $escapedPassword = $password -replace '(["\\$`])', '\\$1'  # Escape for bash

              # Call WSL with the single-line bash command
              wsl.exe -d Ubuntu -u root -- bash -c "sudo adduser --quiet --disabled-password --gecos '' $newUser"
              wsl.exe -d Ubuntu -u root -- bash -c "echo '${newUser}:${escapedPassword}' | sudo chpasswd"
              wsl.exe -d Ubuntu -u root -- bash -c "sudo usermod -aG sudo $newUser"
              wsl.exe -d Ubuntu -u root -- bash -c "echo '$newUser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/$newUser"
          } catch {
              Write-Error "Failed to add user as administrator: $_"
          }

        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Microsoft-Windows-Subsystem-Linux

    # Resource 4: Install Azure CLI and Azure Developer CLI
    - resource: PSDscResources/Script
      id: Ubuntu.AzureCli
      directives:
        description: Install Azure CLI, Developer and Bicep on Ubuntu
        securityContext: elevated
      settings:
        SetScript: |
          try {
              wsl.exe -d Ubuntu -u root -- bash -c "sudo apt-get update"
              wsl.exe -d Ubuntu -u root -- bash -c "sudo apt-get upgrade -y"
              wsl.exe -d Ubuntu -u root -- bash -c "sudo apt-get install -y curl"
              wsl.exe -d Ubuntu -u root -- bash -c "curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash"
              wsl.exe -d Ubuntu -u root -- bash -c "curl -fsSL https://aka.ms/install-azd.sh | sudo bash"
          } catch {
              Write-Error "Failed to install Azure CLI: $_"
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Ubuntu.User

    # Resource 5: Install .NET SDK and Runtime
    - resource: PSDscResources/Script
      id: Ubuntu.NET
      directives:
        description: Install .NET SDK and Runtime
        securityContext: elevated
      settings:
        SetScript: |
          try {
              wsl.exe -d Ubuntu -u root -- bash -c "sudo apt-get update"
              wsl.exe -d Ubuntu -u root -- bash -c "sudo add-apt-repository ppa:dotnet/backports -y"
              wsl.exe -d Ubuntu -u root -- bash -c "sudo apt-get update"
              wsl.exe -d Ubuntu -u root -- bash -c "sudo apt-get install -y dotnet-sdk-9.0"
              wsl.exe -d Ubuntu -u root -- bash -c "sudo apt-get install -y aspnetcore-runtime-9.0"
              wsl.exe -d Ubuntu -u root -- bash -c "sudo dotnet workload install aspire"
              wsl.exe -d Ubuntu -u root -- bash -c "sudo dotnet workload install maui"
          } catch {
              Write-Error "Failed to install .NET SDK and Runtime: $_"
          }
        GetScript: return $false
        TestScript: return $false
      dependsOn:
        - Ubuntu.User
