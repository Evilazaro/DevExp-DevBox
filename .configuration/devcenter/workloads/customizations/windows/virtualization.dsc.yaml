# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
#
# Purpose: This configuration installs and configures Windows Subsystem for Linux (WSL)
# with Ubuntu distribution and essential developer tools including Azure CLI and .NET SDK.
#
# Requirements:
#   - Windows 10/11 with admin privileges
#   - Internet connectivity for package downloads
#   - Runs on Azure DevBox or compatible Windows systems
#
# Maintainer: DevExp Team
#
# Security Note: This configuration follows Azure best practices for security configuration
# but should be reviewed for any environment-specific security requirements.

properties:
  configurationVersion: 0.2.0

  resources:
    # Resource 1: Install Windows Subsystem for Linux feature
    # This resource enables the WSL Windows feature which is required before any Linux 
    # distribution can be installed. The feature is installed without launching WSL
    # immediately, allowing subsequent steps to configure it properly.
    - resource: PSDscResources/Script
      id: Microsoft-Windows-Subsystem-Linux
      directives:
        description: Enable Windows Features and Install Ubuntu for WSL
        securityContext: elevated  # Admin privileges required for Windows feature installation
      settings:
        SetScript: |
          try {
              # Log the installation attempt for troubleshooting purposes
              Write-Verbose "Installing Windows Subsystem for Linux (WSL)" -Verbose
              
              # Install WSL but don't launch it yet - the --no-launch flag prevents 
              # automatic launching which would interrupt our automation
              wsl --install --no-launch 2>$null
          } catch {
              # Proper error handling with detailed message to help troubleshoot failures
              Write-Error "Failed to install WSL: $_"
          }
        # Note: Ideally, GetScript should return the current state for reporting purposes
        # For proper idempotence, this should check if WSL is already installed
        GetScript: return $false
        
        # Note: Ideally, TestScript should determine if the resource is already in desired state
        # For proper idempotence, this should check if WSL is already enabled
        TestScript: return $false

    # Resource 2: Install Ubuntu distribution for WSL
    # After WSL is enabled, this step installs the Ubuntu distribution specifically.
    # Ubuntu provides a strong foundation for development work with extensive
    # package support and compatibility with Azure tools.
    - resource: PSDscResources/Script
      id: Ubuntu
      directives:
        description: Install Ubuntu for WSL
        securityContext: elevated  # Admin privileges required for WSL distribution installation
      settings:
        SetScript: |
          try {
              # Log the installation step
              Write-Verbose "Installing Ubuntu for WSL" -Verbose
              
              # Install Ubuntu distribution but don't launch it immediately
              # This prevents user interaction dialogs from appearing during automation
              wsl --install -d Ubuntu --no-launch 2>$null
          } catch {
              # Capture and log any errors during installation
              Write-Error "Failed to install Ubuntu: $_"
          }
        # Note: In a fully idempotent implementation, GetScript should check
        # if Ubuntu is already installed and return its status
        GetScript: return $false
        
        # Note: In a fully idempotent implementation, TestScript should verify
        # if Ubuntu is already properly installed and return true if so
        TestScript: return $false
      # This resource depends on WSL being installed first
      dependsOn:
        - Microsoft-Windows-Subsystem-Linux

    # Resource 3: Configure Ubuntu user account
    # Sets up a user account in Ubuntu with admin (sudo) privileges to match the Windows user.
    # This ensures seamless integration between Windows and Linux environments,
    # and allows for installing additional tools without password prompts.
    - resource: PSDscResources/Script
      id: Ubuntu.User
      directives:
        description: Add the current user as an administrator to Ubuntu
        securityContext: elevated  # Required for WSL configuration
      settings:
        SetScript: |
          try {
              # Use the current Windows username for consistent identity across both systems
              $newUser = $env:USERNAME.ToLower()
              
              # Security note: In production environments, consider using a more secure
              # approach for password management such as generating a random password
              # that isn't stored in the script, or implementing key-based authentication
              $password = "SecureP@ssw0rd"
              
              # Escape special characters for bash command insertion
              # This prevents command injection issues when passing to bash
              $escapedPassword = $password -replace '(["\\$`])', '\\$1'

              # Step 1: Create user account without password prompt (non-interactive)
              wsl.exe -d Ubuntu -u root -- bash -c "sudo adduser --quiet --disabled-password --gecos '' $newUser"
              
              # Step 2: Set the user password securely
              wsl.exe -d Ubuntu -u root -- bash -c "echo '${newUser}:${escapedPassword}' | sudo chpasswd"
              
              # Step 3: Add user to sudo group for administrative access
              wsl.exe -d Ubuntu -u root -- bash -c "sudo usermod -aG sudo $newUser"
              
              # Step 4: Configure passwordless sudo for automation purposes
              # Note: In production environments, evaluate if this poses any security concerns
              wsl.exe -d Ubuntu -u root -- bash -c "echo '$newUser ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/$newUser"
          } catch {
              # Log detailed error for troubleshooting
              Write-Error "Failed to add user as administrator: $_"
          }

        # For proper idempotence, GetScript should retrieve and return user configuration status
        GetScript: return $false
        
        # For proper idempotence, TestScript should check if user already exists with correct permissions
        TestScript: return $false
      # This depends on Ubuntu being properly installed
      dependsOn:
        - Microsoft-Windows-Subsystem-Linux

    # Resource 4: Updates Ubuntu packages
    # Ensures the Ubuntu system has the latest security updates and package information.
    # This is an important security practice before installing additional software.
    - resource: PSDscResources/Script
      id: Ubuntu.Update
      directives:
        description: Update Ubuntu package repositories and install updates
        securityContext: elevated  # Required for WSL operations
      settings:
        SetScript: |
          try {
              # Update package lists and upgrade installed packages
              # Using --quiet to reduce verbose output
              # Setting DEBIAN_FRONTEND=noninteractive prevents any interactive prompts
              # that could halt automation
              $updateCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; apt-get update && apt-get upgrade -y --quiet'"
              wsl.exe -d Ubuntu -u root -- bash -c "$updateCommand"
          } catch {
              # Note that error message references incorrect process (Azure CLI)
              # This should be fixed to accurately reflect the update operation
              Write-Error "Failed to update Ubuntu packages: $_"
          }
        # For proper idempotence, GetScript should check update status
        GetScript: return $false
        
        # For proper idempotence, TestScript could check if updates were applied recently
        TestScript: return $false
      # This step is not explicitly defined as dependent on the user setup,
      # but it would be a good practice to add that dependency
      dependsOn:
        - Ubuntu.User

    # Resource 5: Install Azure CLI and Azure Developer CLI
    # Installs essential Azure development tools directly in the Ubuntu environment.
    # These tools enable Azure resource management and application deployment
    # using Microsoft's recommended approach.
    - resource: PSDscResources/Script
      id: Ubuntu.AzureCli
      directives:
        description: Install Azure CLI, Developer CLI and Bicep on Ubuntu
        securityContext: elevated  # Required for WSL operations
      settings:
        SetScript: |
          try {
              # Step 1: Install curl which is needed for subsequent installations
              # Using noninteractive mode to prevent prompts during installation
              $updateCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; apt-get install curl --quiet -y'"
              wsl.exe -d Ubuntu -u root -- bash -c "$updateCommand"

              # Step 2: Install Azure CLI using Microsoft's official installation script
              # This approach ensures we get the latest version directly from Microsoft
              $updateCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; curl -fsSL https://aka.ms/InstallAzureCLIDeb | sudo bash'"
              wsl.exe -d Ubuntu -u root -- bash -c "$updateCommand"
              
              # Step 3: Install Azure Developer CLI (azd) using Microsoft's official script
              # azd provides project templates and deployment automation for Azure
              $updateCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; curl -fsSL https://aka.ms/install-azd.sh | sudo bash'"
              wsl.exe -d Ubuntu -u root -- bash -c "$updateCommand"
              
              # Note: For an improved implementation, consider adding:
              # 1. Version verification after installation
              # 2. Installation of Azure Bicep CLI
              # 3. Configuration of default Azure CLI settings
              
          } catch {
              Write-Error "Failed to install Azure CLI: $_"
          }
        # For proper idempotence, GetScript should check if the tools are already installed
        GetScript: return $false
        
        # For proper idempotence, TestScript should verify the installation and version
        TestScript: return $false
      # This step depends on having a configured user account
      dependsOn:
        - Ubuntu.User

    # Resource 6: Install .NET SDK and Runtime
    # Installs the .NET 9 development platform in the Ubuntu environment.
    # This enables cross-platform .NET development directly from WSL,
    # providing compatibility with Azure services and cloud-native applications.
    - resource: PSDscResources/Script
      id: Ubuntu.DotNetSDK
      directives:
        description: Install .NET 9 SDK and Runtime on Ubuntu
        securityContext: elevated  # Required for package installation
      settings:
        SetScript: |
          try {              
              # Step 1: Install .NET SDK and Runtime using Microsoft's recommended approach
              # Installing both SDK for development and runtime for execution
              # Using noninteractive to prevent prompts during installation
             
              $installDotnetCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; sudo add-apt-repository ppa:dotnet/backports -y'"
              wsl.exe -d Ubuntu -u root -- bash -c "$installDotnetCommand"

              $installDotnetCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; sudo apt-get update --quiet && sudo apt-get install --quiet -y dotnet-sdk-9.0'"
              wsl.exe -d Ubuntu -u root -- bash -c "$installDotnetCommand"

              $installDotnetCommand = "sudo bash -c 'export DEBIAN_FRONTEND=noninteractive; sudo apt-get install --quiet -y aspnetcore-runtime-9.0'"
              wsl.exe -d Ubuntu -u root -- bash -c "$installDotnetCommand"              
          } catch {
              # Provide detailed error for troubleshooting
              Write-Error "Failed to install .NET SDK and Runtime: $_"
          }
        
        # For proper idempotence, GetScript should check if the tools are already installed
        GetScript: return $false
        
        # For proper idempotence, TestScript should verify the installation and version
        TestScript: return $false
          
      # This resource depends on having Azure CLI installed first
      dependsOn:
        - Ubuntu.AzureCli