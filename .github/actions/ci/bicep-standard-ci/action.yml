name: Bicep Standard CI
description: |
  This action builds Bicep templates and uploads the artifacts.

runs:
  using: composite
  steps:
      - name: Update Packages
        shell: bash
        run: |
          echo "✅ Updating packages..."
          # Simulate package update
          sudo apt-get update
          echo "✅ Packages updated successfully"

      - name: Setup Git identity
        shell: bash
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Debug trigger information
        shell: bash
        run: |
          echo "🐛 Debug Information:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "SHA: ${{ github.sha }}"

      - name: Get branch information
        shell: bash
        id: branch_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            branch_name="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            branch_name="${{ github.head_ref }}"
          else
            branch_name="${{ github.ref_name }}"
          fi
          
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "✅ Current branch: $branch_name"

      - name: Get latest tag
        shell: bash
        id: get_tag
        run: |
          # Fetch all tags
          git fetch --tags --force
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "✅ Latest tag: $tag"

      - name: Determine release type and strategy
        shell: bash
        id: determine_release_type
        run: |
          branch_name="${{ steps.branch_info.outputs.branch_name }}"
          should_release="true"
          should_publish="true"
          
          echo "🔍 Analyzing branch: $branch_name"
          
          # For PR events, only create pre-releases
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "📋 Pull Request detected - Creating pre-release"
            should_publish="false"
          fi
          
          if [[ "$branch_name" == "main" ]]; then
            # Main branch: conditional major increment with new rule
            release_type="main"
            should_publish="true"
            echo "✅ Main branch detected - Conditional major release strategy with new rule"
            
          elif [[ "$branch_name" == feature/* ]]; then
            # Feature branch: patch increment with overflow logic
            release_type="feature"
            should_publish="false"
            echo "✅ Feature branch detected - Patch increment with overflow strategy (no release publication)"
            
          elif [[ "$branch_name" == fix/* ]]; then
            # Fix branch: minor increment with overflow logic
            release_type="fix"
            should_publish="false"
            echo "✅ Fix branch detected - Minor increment with overflow strategy (no release publication)"
            
          else
            echo "⚠️ Unsupported branch pattern: $branch_name"
            echo "Only main, feature/*, and fix/* branches are supported for releases"
            should_release="false"
            should_publish="false"
            release_type="none"
          fi
          
          echo "release_type=$release_type" >> $GITHUB_OUTPUT
          echo "should_release=$should_release" >> $GITHUB_OUTPUT
          echo "should_publish=$should_publish" >> $GITHUB_OUTPUT
          
          echo "📋 Release Summary:"
          echo "  - Will create tag and version: $should_release"
          echo "  - Will publish GitHub release: $should_publish"

      - name: Build Accelerator Bicep
        shell: bash
        run: |
          echo "✅ Building Bicep templates..."
          mkdir -p ./artifacts
          
          # Check if Azure CLI is available
          if command -v az &> /dev/null; then
            az bicep build --file ./infra/main.bicep --outdir ./artifacts
            echo "✅ Bicep build completed"
          else
            echo "⚠️ Azure CLI not available, creating placeholder artifacts"
            echo "Bicep build would be executed here" > ./artifacts/placeholder.txt
          fi