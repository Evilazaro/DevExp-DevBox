name: Branch-Based Semantic Release

on:
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
    # Removed paths-ignore to ensure the workflow triggers
    # If you need to ignore specific paths, add them back selectively
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (only for main branch)'
        required: false
        default: 'major'
        type: choice
        options:
          - major
  # Add pull_request trigger for testing on feature/fix branches
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
    
permissions:
  contents: write
  pull-requests: read  # Added for PR triggers

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Update all Packages
        run: |
          sudo apt-get update && \
          sudo apt-get upgrade -y

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Build Accelerator Bicep
        run: |
          echo "✅ Building Bicep templates..."
          mkdir -p ./artifacts
          
          # Check if Azure CLI is available
          if command -v az &> /dev/null; then
            az bicep build --file ./infra/main.bicep --outdir ./artifacts
            echo "✅ Bicep build completed"
          else
            echo "⚠️ Azure CLI not available, creating placeholder artifacts"
            echo "Bicep build would be executed here" > ./artifacts/placeholder.txt
          fi

  generate_release:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      new_version: ${{ steps.next_version.outputs.new_version }}
      release_type: ${{ steps.determine_release_type.outputs.release_type }}
      previous_tag: ${{ steps.get_tag.outputs.tag }}
      should_release: ${{ steps.determine_release_type.outputs.should_release }}
      branch_name: ${{ steps.branch_info.outputs.branch_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          # Ensure we get the correct branch for PRs
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Setup Git identity
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Debug trigger information
        run: |
          echo "🐛 Debug Information:"
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head ref: ${{ github.head_ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Actor: ${{ github.actor }}"
          echo "SHA: ${{ github.sha }}"

      - name: Get branch information
        id: branch_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            branch_name="${{ github.ref_name }}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            branch_name="${{ github.head_ref }}"
          else
            branch_name="${{ github.ref_name }}"
          fi
          
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "✅ Current branch: $branch_name"

      - name: Get latest tag
        id: get_tag
        run: |
          # Fetch all tags
          git fetch --tags --force
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "✅ Latest tag: $tag"

      - name: Determine release type and strategy
        id: determine_release_type
        run: |
          branch_name="${{ steps.branch_info.outputs.branch_name }}"
          should_release="true"
          
          echo "🔍 Analyzing branch: $branch_name"
          
          # For PR events, only create pre-releases
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "📋 Pull Request detected - Creating pre-release"
          fi
          
          if [[ "$branch_name" == "main" ]]; then
            # Main branch: major+1.0.0
            release_type="main"
            echo "✅ Main branch detected - Major release strategy"
            
          elif [[ "$branch_name" == feature/* ]]; then
            # Feature branch: major.numberofcommits.patch
            release_type="feature"
            echo "✅ Feature branch detected - Feature release strategy"
            
          elif [[ "$branch_name" == fix/* ]]; then
            # Fix branch: major.minor.numberofcommits
            release_type="fix"
            echo "✅ Fix branch detected - Fix release strategy"
            
          else
            echo "⚠️ Unsupported branch pattern: $branch_name"
            echo "Only main, feature/*, and fix/* branches are supported for releases"
            should_release="false"
            release_type="none"
          fi
          
          echo "release_type=$release_type" >> $GITHUB_OUTPUT
          echo "should_release=$should_release" >> $GITHUB_OUTPUT

      - name: Count commits since last tag
        id: count_commits
        if: steps.determine_release_type.outputs.should_release == 'true'
        run: |
          last_tag="${{ steps.get_tag.outputs.tag }}"
          branch_name="${{ steps.branch_info.outputs.branch_name }}"
          
          echo "🔍 Counting commits for branch: $branch_name"
          echo "🏷️ Last tag: $last_tag"
          
          if [ "$last_tag" = "v0.0.0" ]; then
            # No previous tags, count all commits
            if [[ "$branch_name" == "main" ]]; then
              commit_count=$(git rev-list --count HEAD)
            else
              # For feature/fix branches, count commits in this branch only
              merge_base=$(git merge-base HEAD origin/main 2>/dev/null || git merge-base HEAD main 2>/dev/null || echo "")
              if [ -n "$merge_base" ]; then
                commit_count=$(git rev-list --count ${merge_base}..HEAD)
              else
                commit_count=$(git rev-list --count HEAD)
              fi
            fi
          else
            # Count commits since last tag
            if [[ "$branch_name" == "main" ]]; then
              commit_count=$(git rev-list --count ${last_tag}..HEAD)
            else
              # For feature/fix branches, count commits since branch diverged from main
              merge_base=$(git merge-base HEAD origin/main 2>/dev/null || git merge-base HEAD main 2>/dev/null || echo "")
              if [ -n "$merge_base" ]; then
                commit_count=$(git rev-list --count ${merge_base}..HEAD)
              else
                commit_count=$(git rev-list --count ${last_tag}..HEAD)
              fi
            fi
          fi
          
          # Ensure minimum commit count of 1
          if [ "$commit_count" -eq 0 ]; then
            commit_count=1
          fi
          
          echo "commit_count=$commit_count" >> $GITHUB_OUTPUT
          echo "✅ Commits to include: $commit_count"

      - name: Calculate next version
        id: next_version
        if: steps.determine_release_type.outputs.should_release == 'true'
        run: |
          current_version="${{ steps.get_tag.outputs.tag }}"
          release_type="${{ steps.determine_release_type.outputs.release_type }}"
          commit_count="${{ steps.count_commits.outputs.commit_count }}"
          branch_name="${{ steps.branch_info.outputs.branch_name }}"
          
          # Remove 'v' prefix if present
          current_version=${current_version#v}
          IFS='.' read -r major minor patch <<< "$current_version"
          
          echo "📊 Current version: v$major.$minor.$patch"
          echo "📊 Release type: $release_type"
          echo "📊 Commit count: $commit_count"
          
          case "$release_type" in
            main)
              # Main branch: major+1.0.0
              major=$((major + 1))
              minor=0
              patch=0
              version_suffix=""
              ;;
            feature)
              # Feature branch: major.numberofcommits.patch
              minor=$commit_count
              # Clean branch name for version suffix
              clean_branch_name=$(echo "${branch_name#feature/}" | sed 's/[^a-zA-Z0-9]/-/g')
              version_suffix="-feature.$clean_branch_name"
              ;;
            fix)
              # Fix branch: major.minor.numberofcommits
              patch=$commit_count
              # Clean branch name for version suffix
              clean_branch_name=$(echo "${branch_name#fix/}" | sed 's/[^a-zA-Z0-9]/-/g')
              version_suffix="-fix.$clean_branch_name"
              ;;
            *)
              echo "❌ Invalid release type: $release_type"
              exit 1
              ;;
          esac
          
          # Add PR suffix if this is a pull request
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            version_suffix="${version_suffix}-pr${{ github.event.number }}"
          fi
          
          new_version="v$major.$minor.$patch$version_suffix"
          echo "✅ Next version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
  
  publish_release:
    runs-on: ubuntu-latest
    needs: generate_release
    if: needs.generate_release.outputs.should_release == 'true'
    steps:
      - name: Update all Packages
        run: |
          sudo apt-get update && \
          sudo apt-get upgrade -y

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.head_ref || github.ref }}

      - name: Build Accelerator Bicep
        run: |
          echo "✅ Building Bicep templates..."
          mkdir -p ./artifacts
          
          # Check if Azure CLI is available
          if command -v az &> /dev/null; then
            az bicep build --file ./infra/main.bicep --outdir ./artifacts
            echo "✅ Bicep build completed"
          else
            echo "⚠️ Azure CLI not available, creating placeholder artifacts"
            echo "Bicep build would be executed here" > ./artifacts/placeholder.txt
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ needs.generate_release.outputs.new_version }}
          path: ./artifacts
          compression-level: 6
          overwrite: true
          if-no-files-found: warn

      - name: Create Git Tag and GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.generate_release.outputs.new_version }}
          name: Release ${{ needs.generate_release.outputs.new_version }}
          body: |
            🌟 **Branch-Based Release Strategy**
            
            🔀 **Branch**: `${{ needs.generate_release.outputs.branch_name }}`
            🏷️ **Version**: `${{ needs.generate_release.outputs.new_version }}`
            📦 **Previous Version**: `${{ needs.generate_release.outputs.previous_tag }}`
            🚀 **Release Type**: `${{ needs.generate_release.outputs.release_type }}`
            🤖 **Trigger**: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || github.event_name == 'pull_request' && 'Pull Request' || 'Push' }}
            📝 **Commit**: `${{ github.sha }}`
            
            ## Release Strategy Applied
            
            ${{ needs.generate_release.outputs.release_type == 'main' && '🎯 **Main Branch**: Major version increment (major+1.0.0)' || '' }}
            ${{ needs.generate_release.outputs.release_type == 'feature' && '✨ **Feature Branch**: Version format (major.commits.patch)' || '' }}
            ${{ needs.generate_release.outputs.release_type == 'fix' && '🔧 **Fix Branch**: Version format (major.minor.commits)' || '' }}
            
            ## Artifacts
            - 📄 Bicep templates compiled to ARM templates
            - 🏗️ Infrastructure deployment files
            - 📋 Release metadata and documentation
          files: ./artifacts/*
          draft: ${{ github.event_name == 'pull_request' }}
          prerelease: ${{ needs.generate_release.outputs.release_type != 'main' || github.event_name == 'pull_request' }}
          make_latest: ${{ needs.generate_release.outputs.release_type == 'main' && github.event_name != 'pull_request' }}