name: Branch-Based Semantic Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (only for main branch)'
        required: false
        default: 'major'
        type: choice
        options:
          - major
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
    paths-ignore:
      - '**.md'
      - '.github/**'
      - 'docs/**'
    
permissions:
  contents: write

jobs:
  generate_release:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.next_version.outputs.new_version }}
      release_type: ${{ steps.determine_release_type.outputs.release_type }}
      previous_tag: ${{ steps.get_tag.outputs.tag }}
      should_release: ${{ steps.determine_release_type.outputs.should_release }}
      branch_name: ${{ steps.branch_info.outputs.branch_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for commit analysis

      - name: Setup Git identity
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Get branch information
        id: branch_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            branch_name="${{ github.ref_name }}"
          else
            branch_name="${{ github.head_ref || github.ref_name }}"
          fi
          
          echo "branch_name=$branch_name" >> $GITHUB_OUTPUT
          echo "✅ Current branch: $branch_name"

      - name: Get latest tag
        id: get_tag
        run: |
          tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "✅ Latest tag: $tag"

      - name: Determine release type and strategy
        id: determine_release_type
        run: |
          branch_name="${{ steps.branch_info.outputs.branch_name }}"
          should_release="true"
          
          echo "🔍 Analyzing branch: $branch_name"
          
          if [[ "$branch_name" == "main" ]]; then
            # Main branch: major+1.0.0
            release_type="main"
            echo "✅ Main branch detected - Major release strategy"
            
          elif [[ "$branch_name" == feature/* ]]; then
            # Feature branch: major.numberofcommits.patch
            release_type="feature"
            echo "✅ Feature branch detected - Feature release strategy"
            
          elif [[ "$branch_name" == fix/* ]]; then
            # Fix branch: major.minor.numberofcommits
            release_type="fix"
            echo "✅ Fix branch detected - Fix release strategy"
            
          else
            echo "⚠️ Unsupported branch pattern: $branch_name"
            echo "Only main, feature/*, and fix/* branches are supported for releases"
            should_release="false"
            release_type="none"
          fi
          
          echo "release_type=$release_type" >> $GITHUB_OUTPUT
          echo "should_release=$should_release" >> $GITHUB_OUTPUT

      - name: Count commits since last tag
        id: count_commits
        if: steps.determine_release_type.outputs.should_release == 'true'
        run: |
          last_tag="${{ steps.get_tag.outputs.tag }}"
          branch_name="${{ steps.branch_info.outputs.branch_name }}"
          
          if [ "$last_tag" = "v0.0.0" ]; then
            # No previous tags, count all commits
            if [[ "$branch_name" == "main" ]]; then
              commit_count=$(git rev-list --count HEAD)
            else
              # For feature/fix branches, count commits in this branch
              commit_count=$(git rev-list --count HEAD ^origin/main 2>/dev/null || git rev-list --count HEAD)
            fi
          else
            # Count commits since last tag
            if [[ "$branch_name" == "main" ]]; then
              commit_count=$(git rev-list --count ${last_tag}..HEAD)
            else
              # For feature/fix branches, count commits since branch creation or last tag
              commit_count=$(git rev-list --count HEAD ^origin/main 2>/dev/null || git rev-list --count ${last_tag}..HEAD)
            fi
          fi
          
          echo "commit_count=$commit_count" >> $GITHUB_OUTPUT
          echo "✅ Commits to include: $commit_count"

      - name: Calculate next version
        id: next_version
        if: steps.determine_release_type.outputs.should_release == 'true'
        run: |
          current_version="${{ steps.get_tag.outputs.tag }}"
          release_type="${{ steps.determine_release_type.outputs.release_type }}"
          commit_count="${{ steps.count_commits.outputs.commit_count }}"
          branch_name="${{ steps.branch_info.outputs.branch_name }}"
          
          # Remove 'v' prefix if present
          current_version=${current_version#v}
          IFS='.' read -r major minor patch <<< "$current_version"
          
          echo "📊 Current version: v$major.$minor.$patch"
          echo "📊 Release type: $release_type"
          echo "📊 Commit count: $commit_count"
          
          case "$release_type" in
            main)
              # Main branch: major+1.0.0
              major=$((major + 1))
              minor=0
              patch=0
              version_suffix=""
              ;;
            feature)
              # Feature branch: major.numberofcommits.patch
              minor=$commit_count
              version_suffix="-feature.${branch_name#feature/}"
              ;;
            fix)
              # Fix branch: major.minor.numberofcommits
              patch=$commit_count
              version_suffix="-fix.${branch_name#fix/}"
              ;;
            *)
              echo "❌ Invalid release type: $release_type"
              exit 1
              ;;
          esac
          
          new_version="v$major.$minor.$patch$version_suffix"
          echo "✅ Next version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
  
  publish_release:
    runs-on: ubuntu-latest
    needs: generate_release
    if: needs.generate_release.outputs.should_release == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Azure CLI
        uses: azure/setup-azure@v1
        with:
          enable-AzPSSession: false

      - name: Build Accelerator Bicep
        run: |
          echo "✅ Building Bicep templates..."
          mkdir -p ./artifacts
          az bicep build --file ./infra/main.bicep --outdir ./artifacts
          echo "✅ Bicep build completed"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ needs.generate_release.outputs.new_version }}
          path: ./artifacts
          compression-level: 6
          overwrite: true
          if-no-files-found: error

      - name: Create Git Tag and GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.generate_release.outputs.new_version }}
          name: Release ${{ needs.generate_release.outputs.new_version }}
          body: |
            🌟 **Branch-Based Release Strategy**
            
            🔀 **Branch**: `${{ needs.generate_release.outputs.branch_name }}`
            🏷️ **Version**: `${{ needs.generate_release.outputs.new_version }}`
            📦 **Previous Version**: `${{ needs.generate_release.outputs.previous_tag }}`
            🚀 **Release Type**: `${{ needs.generate_release.outputs.release_type }}`
            🤖 **Trigger**: ${{ github.event_name == 'workflow_dispatch' && 'Manual' || 'Automatic' }}
            📝 **Commit**: `${{ github.sha }}`
            
            ## Release Strategy Applied
            
            ${{ needs.generate_release.outputs.release_type == 'main' && '🎯 **Main Branch**: Major version increment (major+1.0.0)' || '' }}
            ${{ needs.generate_release.outputs.release_type == 'feature' && '✨ **Feature Branch**: Version format (major.commits.patch)' || '' }}
            ${{ needs.generate_release.outputs.release_type == 'fix' && '🔧 **Fix Branch**: Version format (major.minor.commits)' || '' }}
            
            ## Artifacts
            - 📄 Bicep templates compiled to ARM templates
            - 🏗️ Infrastructure deployment files
            - 📋 Release metadata and documentation
          files: ./artifacts/*
          draft: false
          prerelease: ${{ needs.generate_release.outputs.release_type != 'main' }}
          make_latest: ${{ needs.generate_release.outputs.release_type == 'main' }}