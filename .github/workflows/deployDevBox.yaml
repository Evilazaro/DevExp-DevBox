name: Deploy DevBox as a Service to Azure
 

permissions:
  id-token: write
  contents: write

# Trigger the workflow manually
on:
  workflow_dispatch:

env:
  location: "westus3"
  workloadName: "ContosoDevExp"
  devBoxResourceGroupName: "ContosoDevExp-rg"
  connectivityResourceGroupName: "ContosoDevExp-Network-rg"
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

jobs:

  Build-and-Deploy:
    name: Deploy Dev Box Resources to Azure
    runs-on: ubuntu-latest
    steps:
      # Update packages and upgrade Bicep
      - name: Update Packages and Upgrade Bicep
        run: |
          sudo apt-get update && \
          # sudo apt-get upgrade -y && \
          sudo az bicep upgrade
      
      # Checkout the repository to get the source code
      - name: Checkout repository
        uses: actions/checkout@v4
  
      # Build the Bicep files for Dev Box Resources
      - name: Build Dev Box Bicep files
        run: |
          az bicep build --file ./deploy/deploy.bicep --outfile ./bicepArtifacts/deploy.json
          az bicep build-params ./deploy/params.bicepparam --outfile ./bicepArtifacts/deploy-params.json

      # Compress the built Bicep artifacts into a zip file
      - name: Compress Bicep Artifacts
        run: |
          zip -r bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip ./bicepArtifacts

      # Upload the compressed Bicep artifacts
      - name: Upload Bicep Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip
          path: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip

      # Log in to Azure using credentials stored in GitHub Secrets
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Grant execute permissions to the deployment script
      - name: Grant execute permissions to the script
        run: chmod +x ./deploy/bash/deployResourcesOrganization.sh

      # Deploy the Landing Zone Resources using the deployment script
      - name: Deploy Landing Zone Resources for ${{ env.workloadName }}
        run: ./deploy/bash/deployResourcesOrganization.sh ${{ env.devBoxResourceGroupName }} ${{ env.connectivityResourceGroupName }} ${{ env.location }}

      # Deploy the Landing Zone Resources using the deployment script
      - name: Checking all changes for ${{ env.workloadName }} in the Connectivity Landing Zone environment before deploying
        shell: bash
        id: check-changes-connectivity
        run: |
          az deployment group what-if \
            --resource-group ${{ env.connectivityResourceGroupName }} \
            --template-file ./src/bicep/connectivity/connectivityWorkload.bicep \
            --parameters ./src/bicep/connectivity/params.bicepparam \
            --parameters workloadName=${{ env.workloadName }} \
                connectivityResourceGroupName=${{ env.connectivityResourceGroupName }} \
            --mode Incremental

      # Deploy the Landing Zone Resources using the deployment script
      - name: Checking all changes for ${{ env.workloadName }} in the DevEX Landing Zone environment before deploying
        shell: bash
        id: check-changes-dev-box
        run: |
          az deployment group what-if \
            --resource-group ${{ env.devBoxResourceGroupName }} \
            --template-file ./src/bicep/DevEx/devExWorkload.bicep \
            --parameters ./src/bicep/DevEx/params.bicepparam \
            --parameters workloadName=${{ env.workloadName }} \
            --mode Incremental

      # Deploy the Landing Zone Resources using the deployment script
      - name: Checking all changes for ${{ env.workloadName }} in the Identity resources before deploying
        shell: bash
        id: check-changes-identity
        run: |
          az deployment group what-if \
            --resource-group ${{ env.devBoxResourceGroupName }} \
            --template-file ./src/bicep/identity/identityModule.bicep \
            --parameters ./src/bicep/identity/params.bicepparam \
            --parameters workloadName=${{ env.workloadName }} \
            --mode Incremental

      - name: Deploy Dev Box DevCenter Resources for ${{ env.workloadName }} to Azure
        shell: bash
        id: deploy-dev-center
        run: |
          az deployment group create \
            --resource-group ${{ env.devBoxResourceGroupName }} \
            --template-file ./deploy/deploy.bicep \
            --parameters ./deploy/params.bicepparam \
            --parameters workloadName=${{ env.workloadName }} \
                connectivityResourceGroupName=${{ env.connectivityResourceGroupName }} \
            --mode Incremental    

  publish-bicep-artifacts:
    runs-on: ubuntu-latest
    needs: Build-and-Deploy
    steps:
      # Checkout the repository to get the source code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Download the previously uploaded Bicep artifacts
      - name: Download Bicep Artifacts
        uses: actions/download-artifact@v4
        with:
          name: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip

      # Upload the Bicep artifacts to storage (add your upload logic here)
      - name: Upload Bicep Artifacts to Storage
        run: |
          # Add your upload logic here
          echo "Uploading Bicep artifacts"

  create-release:
    runs-on: ubuntu-latest
    needs: publish-bicep-artifacts
    steps:
      # Checkout the repository to get the source code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Download the previously uploaded Bicep artifacts
      - name: Download Bicep Artifacts
        uses: actions/download-artifact@v4
        with:
          name: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip

      # Create a new GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release v1.0.${{ github.run_number }}
          body: |
            Commits: ${{ toJson(github.event.Commits) }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the release asset to the GitHub release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip
          asset_name: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}