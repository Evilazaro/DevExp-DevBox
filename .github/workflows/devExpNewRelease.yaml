name: Dev Experience with Microsoft DevBox New Release

permissions:
  id-token: write
  contents: write

# Trigger the workflow manually
on:
  workflow_dispatch:

env:
  location: "northuscentral"
  solutionName: "PetDx"
  devBoxResourceGroupName: "PetDx-rg"
  networkResourceGroupName: "PetDx-Network-rg"
  managementResourceGroupName: "PetDx-Management-rg"
  FORCE_JAVASCRIPT_ACTIONS_TO_NODE20: true

jobs:
  Test-Azure-Credentials-And-Login:
    runs-on: ubuntu-latest
    steps:
      # Log in to Azure using credentials stored in GitHub Secrets
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

  Build:
    runs-on: ubuntu-latest
    needs: Test-Azure-Credentials-And-Login
    steps:
      # Upgrade Bicep to the latest version
      - name: Upgrade Bicep
        run: |
          sudo az bicep upgrade

      # Checkout the repository to get the source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Build the Bicep files for Dev Box Management Resources
      - name: Build Dev Box Management Bicep files
        run: az bicep build --file ./src/deploy/bicep/management/logAnalytics/deploy.bicep --outfile ./bicepArtifacts/deployManagement.json

      # Build the Bicep files for Dev Box Network Resources
      - name: Build Dev Box Network Bicep files
        run: az bicep build --file ./src/deploy/bicep/network/deploy.bicep --outfile ./bicepArtifacts/deployNetwork.json

      # Build the Bicep files for Dev Box DevCenter Resources
      - name: Build Dev Box DevCenter Bicep files
        run: az bicep build --file ./src/deploy/bicep/devBox/deploy.bicep --outfile ./bicepArtifacts/deployDevBox.json

      # Compress the built Bicep artifacts into a zip file
      - name: Compress Bicep Artifacts
        run: |
          zip -r bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip ./bicepArtifacts

      # Upload the compressed Bicep artifacts
      - name: Upload Bicep Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip
          path: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip

  Deploy:
    runs-on: ubuntu-latest
    needs: Build
    steps:
      # Update packages and upgrade Bicep
      - name: Update Packages and Upgrade Bicep
        run: |
          sudo apt-get update && \
          sudo az bicep upgrade
      
      # Checkout the repository to get the source code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Log in to Azure using credentials stored in GitHub Secrets
      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Grant execute permissions to the deployment script
      - name: Grant execute permissions to the script
        run: chmod +x ./src/deploy/bicep/bash/deployResourcesOrganization.sh

      # Deploy the Landing Zone Resources using the deployment script
      - name: Deploy Landing Zone Resources for ${{ env.solutionName }}
        run: ./src/deploy/bicep/bash/deployResourcesOrganization.sh ${{ env.devBoxResourceGroupName }} ${{ env.networkResourceGroupName }} ${{ env.managementResourceGroupName }} ${{ env.location }}
      
      # Deploy Log Analytics resources using ARM template
      - name: Deploy Log Analytics
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_CREDENTIALS.subscriptionId }}
          resourceGroupName: ${{ env.managementResourceGroupName }}
          template: ./src/deploy/bicep/management/logAnalytics/deploy.bicep
          parameters: 'solutionName=${{ env.solutionName }}'
      
      # Deploy Network Connectivity Resources using ARM template
      - name: Deploy Network Connectivity Resources
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_CREDENTIALS.subscriptionId }}
          resourceGroupName: ${{ env.networkResourceGroupName }}
          template: ./src/deploy/bicep/network/deploy.bicep
          parameters: 'solutionName=${{ env.solutionName }} managementResourceGroupName=${{ env.managementResourceGroupName }}'

      # Deploy Dev Center Resources using ARM template
      - name: Deploy Dev Center Resources
        uses: azure/arm-deploy@v1
        with:
          subscriptionId: ${{ secrets.AZURE_CREDENTIALS.subscriptionId }}
          resourceGroupName: ${{ env.devBoxResourceGroupName }}
          template: ./src/deploy/bicep/devBox/deploy.bicep
          parameters: 'solutionName=${{ env.solutionName }} managementResourceGroupName=${{ env.managementResourceGroupName }}'

  publish-bicep-artifacts:
    runs-on: ubuntu-latest
    needs: Deploy
    steps:
      # Checkout the repository to get the source code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Download the previously uploaded Bicep artifacts
      - name: Download Bicep Artifacts
        uses: actions/download-artifact@v4
        with:
          name: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip

      # Upload the Bicep artifacts to storage (add your upload logic here)
      - name: Upload Bicep Artifacts to Storage
        run: |
          # Add your upload logic here
          echo "Uploading Bicep artifacts"

  create-release:
    runs-on: ubuntu-latest
    needs: publish-bicep-artifacts
    steps:
      # Checkout the repository to get the source code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Download the previously uploaded Bicep artifacts
      - name: Download Bicep Artifacts
        uses: actions/download-artifact@v4
        with:
          name: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip

      # Create a new GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v1.0.${{ github.run_number }}
          release_name: Release v1.0.${{ github.run_number }}
          body: |
            Commits: ${{ toJson(github.event.commits) }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload the release asset to the GitHub release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip
          asset_name: bicepArtifacts_v1.0.0-deploy-${{ github.run_number }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}