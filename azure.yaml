# yaml-language-server: $schema=https://raw.githubusercontent.com/Azure/azure-dev/refs/heads/main/schemas/v1.0/azure.yaml.json

name: ContosoDevExp

hooks:
  preprovision:
    shell: sh
    continueOnError: false
    interactive: true
    run: |
      #!/bin/bash
      
      set -e 
      defaultPlatform="adogit"
      keyVaultSecretDefaultValue=""
      
      # Add a if statement to check if the environment variable is set
      if [ -z "${SOURCE_CONTROL_PLATFORM}" ]; then
          echo "SOURCE_CONTROL_PLATFORM is not set. Setting it to '${defaultPlatform}' by default."
          export SOURCE_CONTROL_PLATFORM="${SOURCE_CONTROL_PLATFORM:-${defaultPlatform}}"
      else
          echo "Existing SOURCE_CONTROL_PLATFORM is set to '${SOURCE_CONTROL_PLATFORM}'."
      fi
      if [ -z "${KEY_VAULT_SECRET}" ]; then
          echo "KEY_VAULT_SECRET is not set. Setting it to '${keyVaultSecretDefaultValue}' by default."
          export KEY_VAULT_SECRET="${KEY_VAULT_SECRET:-${keyVaultSecretDefaultValue}}"
      else
          echo "Existing KEY_VAULT_SECRET is set to '${KEY_VAULT_SECRET}'."
      fi

      ./setup.sh --source-control-platform "${SOURCE_CONTROL_PLATFORM}" --azure-env-name "${AZURE_ENV_NAME}" --key-vault-secret "${KEY_VAULT_SECRET}"


# hooks:
#   preprovision:
#     shell: pwsh
#     continueOnError: false
#     interactive: true
#     run: |
#       $ErrorActionPreference = "Stop"
#       $defaultPlatform = "github"
      
#       # Check if the environment variable is set
#       if ([string]::IsNullOrEmpty($env:SOURCE_CONTROL_PLATFORM)) {
#           Write-Host "SOURCE_CONTROL_PLATFORM is not set. Setting it to '$defaultPlatform' by default."
#           $env:SOURCE_CONTROL_PLATFORM = $defaultPlatform
#       } else {
#           Write-Host "Existing SOURCE_CONTROL_PLATFORM is set to '$($env:SOURCE_CONTROL_PLATFORM)'."
#       }
      
#       .\setup.ps1 -e $env:AZURE_ENV_NAME -s $env:SOURCE_CONTROL_PLATFORM
